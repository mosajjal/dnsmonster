{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "Workspace Region": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('Workspace Region')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimDnsDnsMonster",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "DNS activity ASIM parser for DNSmonster",
            "category": "ASIM",
            "FunctionAlias": "ASimDnsDnsMonster",
            "query": "let rcodes = dynamic([\"NOERROR\",\"FORMERR\",\"SERVFAIL\",\"NXDOMAIN\",\"NOTIMP\",\"REFUSED\",\"YXDOMAIN\",\"YXRRSET\",\"NXRRSET\",\"NOTAUTH\",\"NOTZONE\",\"DSOTYPENI\"]);\nlet rrcodes = dynamic([\"RESV\",\"A\",\"NS\",\"MD\",\"MF\",\"CNAME\",\"SOA\",\"MB\",\"MG\",\"MR\",\"NULL\",\"WKS\",\"PTR\",\"HINFO\",\"MINFO\",\"MX\",\"TXT\",\"RP\",\"AFSDB\",\"X25\",\"ISDN\",\"RT\",\"NSAP\",\"NSAP-PTR\",\"SIG\",\"KEY\",\"PX\",\"GPOS\",\"AAAA\",\"LOC\",\"NXT\",\"EID\",\"NIMLOC\",\"SRV\",\"ATMA\",\"NAPTR\",\"KX\",\"CERT\",\"A6\",\"DNAME\",\"SINK\",\"OPT\",\"APL\",\"DS\",\"SSHFP\",\"IPSECKEY\",\"RRSIG\",\"NSEC\",\"DNSKEY\",\"DHCID\",\"NSEC3\",\"NSEC3PARAM\",\"TLSA\",\"SMIMEA\",\"UNASSIGN\",\"HIP\",\"NINFO\",\"RKEY\",\"TALINK\",\"CDS\",\"CDNSKEY\",\"OPENPGPKEY\",\"CSYNC\",\"ZONEMD\",\"SVCB\",\"HTTPS\"]);\nlet opcodes = dynamic([\"Query\",\"IQuery\",\"Status\",\"Unassigned\",\"Notify\",\"Update\",\"DNS Stateful Operations\"]);\nlet parser=(disabled:bool=false)\n {\n   dnsmonster_CL | where not(disabled)\n   | where not(DNS_Response_b)\n   | extend DNS_Question = todynamic(DNS_Question_s)\n   | mv-expand DNS_Question\n   | extend EventType = opcodes[toint(DNS_Opcode_d)],\n            EventSubType = \"request\",\n           EventResultsDetails = rcodes[toint(DNS_Rcode_d)],\n           EventSchemaVersion = \"0.1.3\",\n           EventSchema = \"Dns\",\n           Src = SrcIP_s,\n           SrcPortNumber = SrcPort_d,\n           Dst = DstIP_s,\n           DstPortNumber = DstPort_d,\n           DnsQuery = DNS_Question.Name,\n           DnsQueryType = DNS_Question.Qtype,\n           DnsQueryTypeName = rrcodes[toint(DNS_Question.Qtype)],            \n           DnsQueryClass = DNS_Question.Qclass,\n           NetworkProtocol = Protocol_s,\n           DnsFlagsAuthenticated = DNS_AuthenticatedData_b,\n           DnsFlagsAuthoritative = DNS_Authoritative_b,\n           DnsFlagsCheckingDisabled = DNS_CheckingDisabled_b,\n           DnsFlagsRecursionAvailable = DNS_RecursionAvailable_b,\n           DnsFlagsRecursionDesired = DNS_RecursionDesired_b,\n           DnsFlagsTrucated = DNS_Truncated_b\n   | project EventType,EventSubType,EventResultsDetails,EventSchemaVersion,EventSchema,Src,SrcPortNumber,Dst,DstPortNumber,\n           DnsQuery,DnsQueryType,DnsQueryTypeName,DnsQueryClass,NetworkProtocol,\n           DnsFlagsAuthenticated,DnsFlagsAuthoritative,DnsFlagsCheckingDisabled,DnsFlagsRecursionAvailable,DnsFlagsRecursionDesired,DnsFlagsTrucated\n };\n parser",
            "version": 1
          }
        }
      ]
    }
  ]
}